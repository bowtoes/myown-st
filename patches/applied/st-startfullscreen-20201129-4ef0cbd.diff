diff --git a/config.def.h b/config.def.h
index 6f05dce..72f591e 100644
--- a/config.def.h
+++ b/config.def.h
@@ -42,6 +42,8 @@ static unsigned int tripleclicktimeout = 600;
 
 /* alt screens */
 int allowaltscreen = 1;
+/* Start Fullscreen */
+int startfullscreen = 0;
 
 /* allow certain non-interactive (insecure) window operations such as:
    setting the clipboard text */
diff --git a/st.1 b/st.1
index 39120b4..3c35eff 100644
--- a/st.1
+++ b/st.1
@@ -4,6 +4,7 @@ st \- simple terminal
 .SH SYNOPSIS
 .B st
 .RB [ \-aiv ]
+.RB [ \-F ]\" Start Fullscreen
 .RB [ \-c
 .IR class ]
 .RB [ \-f
@@ -28,6 +29,7 @@ st \- simple terminal
 .PP
 .B st
 .RB [ \-aiv ]
+.RB [ \-F ]\" Start Fullscreen
 .RB [ \-c
 .IR class ]
 .RB [ \-f
@@ -55,6 +57,9 @@ is a simple terminal emulator.
 .B \-a
 disable alternate screens in terminal
 .TP
+.BI \-F \" Start Fullscreen
+create the window in true fullscreen
+.TP
 .BI \-c " class"
 defines the window class (default $TERM).
 .TP
diff --git a/x.c b/x.c
index 120e495..6f73943 100644
--- a/x.c
+++ b/x.c
@@ -59,6 +59,7 @@ static void zoom(const Arg *);
 static void zoomabs(const Arg *);
 static void zoomreset(const Arg *);
 static void ttysend(const Arg *);
+static void togglefscreen(const Arg *); /* Start Fullscreen */
 
 /* config.h for applying patches and the configuration. */
 #include "config.h"
@@ -189,6 +190,8 @@ static int match(uint, uint);
 static void run(void);
 static void usage(void);
 
+static void setfullscreen(int); /* Start Fullscreen */
+
 static void (*handler[LASTEvent])(XEvent *) = {
 	[KeyPress] = kpress,
 	[ClientMessage] = cmessage,
@@ -328,6 +331,15 @@ ttysend(const Arg *arg)
 	ttywrite(arg->s, strlen(arg->s), 1);
 }
 
+/* Start Fullscreen */
+/* TODO: Make this work */
+void
+togglefscreen(const Arg *arg)
+{
+	startfullscreen = !(startfullscreen);
+	setfullscreen(startfullscreen);
+}
+
 int
 evcol(XEvent *e)
 {
@@ -1192,6 +1204,9 @@ xinit(int cols, int rows)
 	xw.netwmpid = XInternAtom(xw.dpy, "_NET_WM_PID", False);
 	XChangeProperty(xw.dpy, xw.win, xw.netwmpid, XA_CARDINAL, 32,
 			PropModeReplace, (uchar *)&thispid, 1);
+	/* Start Fullscreen */
+	if (startfullscreen)
+		setfullscreen(startfullscreen);
 
 	win.mode = MODE_NUMLOCK;
 	resettitle();
@@ -1981,16 +1996,32 @@ run(void)
 void
 usage(void)
 {
-	die("usage: %s [-aiv] [-c class] [-f font] [-g geometry]"
+	die("usage: %s [-aiv] [-F] [-c class] [-f font] [-g geometry]"
 	    " [-n name] [-o file]\n"
 	    "          [-T title] [-t title] [-w windowid]"
 	    " [[-e] command [args ...]]\n"
-	    "       %s [-aiv] [-c class] [-f font] [-g geometry]"
+	    "       %s [-aiv] [-F] [-c class] [-f font] [-g geometry]"
 	    " [-n name] [-o file]\n"
 	    "          [-T title] [-t title] [-w windowid] -l line"
 	    " [stty_args ...]\n", argv0, argv0);
 }
 
+/* Start Fullscreen */
+void
+setfullscreen(int f)
+{
+	/* Code for changing fullscreen mode taken from:
+	   https://stackoverflow.com/a/28396773/13528679
+	**/
+	Atom wm_state, wm_fullscreen;
+
+	wm_state = XInternAtom(xw.dpy, "_NET_WM_STATE", False);
+	wm_fullscreen = XInternAtom(xw.dpy, "_NET_WM_STATE_FULLSCREEN", False);
+
+	XChangeProperty(xw.dpy, xw.win, wm_state, XA_ATOM, 32,
+			PropModeReplace, (uchar *)&wm_fullscreen, f);
+}
+
 int
 main(int argc, char *argv[])
 {
@@ -2002,6 +2033,9 @@ main(int argc, char *argv[])
 	case 'a':
 		allowaltscreen = 0;
 		break;
+	case 'F':
+		startfullscreen = 1;
+		break;
 	case 'c':
 		opt_class = EARGF(usage());
 		break;
